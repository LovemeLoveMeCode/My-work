HTML:
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
HTML是标记语言而非编程语言，主要用来描述网页结构
<a>标签用于定义超链接，href属性指示链接目标
<p>标签用于定义段落
<div>标签用于定义文档中的分区
<hr>标签用于定义水平分界线
<br>标签用于定义断行
<button>标签用于定义按钮
<h1....h6>标签用于定义标婷，大小逐个递减
<img>标签用于定义图片，src属性用于指向图片地址，alt属性定义图片替换文字
<input>用于定义输入，type属性定义输入类型：text、checkbox、password、submit，其中submit配合form标签使用
<ol>用于定义有序列表，<ul>用于定义无序列表,<li>定义列表项目，它们组合使用
<table>用于定义表格，<tr>定义表格中的列，<td>定义表格中的单元格，他们组合使用
<head>标签内部用于定义关于文档的信息，<title>用于定义网页的标题
<!DOCTYPE>用于定义文档类型
<font>标签用于定义字体样式，color属性用于定义字体颜色，size属性用于定义字体大小

<span>与<div>的异同：
<div>与<span>都用于定义分区，不同的是<div>是块级元素，每对div标签（<div></div>）里的内容都可以占据一行，不会与其他标签在一行显示，div标签总是从新行开始显示；
div标签内可以添加其他的标签元素（行内元素、块级元素都行）
div标签可以通过css样式来设置自身的宽度（也可省略，当没有使用css自定义宽度时，div标签的宽度为其的容器的100%）、高度，且还可以设置标签之间的距离（padding与margin）

span标签是行内元素，会在一行显示，span标签内只能添加行内元素的标签或文本，span标签的宽度、高度都无法通过css样式设置，它的宽高受其本身内容（文字、图片）控制，随着内容的宽高改变而改变；
span标签无法控制外边距和内边距，虽然可以设置左右的外边距和内边距，但上下的外边距和内边距无法设置；
span标签里只能容纳文本或者是其他的行内元素，不能容纳块级元素
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

CSS:
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
CSS能高效地定义HTML元素的外观和样式
CSS的层叠次序：浏览器默认样式->外部样式表->内部样式表（位于<head>标签内）->行内样式（在HTML元素内部），优先级逐渐提升（即当不同样式表的样式发生冲突时，选择优先级高的执行）
内部样式：
           <head>
            <style>
            p{ 
            color:red
            }
            </style>
          </head>
外部样式：
<link rel="stylesheet" href="CSS文件的地址"  >
行内样式：<p style="color:red" ></p>
CSS的一些基本语法：
单项选择：
selector
{
  property:value
}

多项选择：
selector1，selector2，selector3....(selector之间为并列关系)
{
  property:value
}
后代选择：
selector1  selector2 （selector之间为包含关系）
{
  property:value
}
在后代选择中，selector1主要起到缩小范围的作用，特定选择selector1中的selector2
子选择：
selector1 > selector2 (selector之间为严格的父子关系)
{
  property:value
}
子选择与后代选择的主要不同之处在于后代选择会选择所有的被包含对象例如子对象和孙对象，而子选择只选择子对象
id选择
#id
{
   property：value
}
类选择
.class
{
  property:value
}
注意id选择的优先级比类选择的要高，意味着当而这发生冲突时执行的是id选择中的内容
边框属性border的样式有solid（实线）、dotted（点状）、dashed（虚线）三种
盒模型：
盒模型是css布局的基石，它规定了网页元素如何显示以及元素间的相互关系。css定义所有的元素都可以拥有像盒子一样的外形和平面空间。即都包含内容区、补白（填充）、边框、边界(外边距)
这就是盒模型。
盒模型由外到内的顺序为：margin（外边距）->border（边框）->padding（内边距）->box（内容）
位置属性poisition用于定义对象的位置，分为static（默认位置）、relative（相对位置）、absolute（绝对位置）、fixed（窗口位置）
relative与absolute：relative与absolute都是相对static而言的，relative与absolute的位置是从默认位置移动过去的，不同之处在于relative原有的static的位置保留，而absolute原有的位置
则不保留
属性float定义浮动，left表示浮于左端，right表示浮于右端
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

JavaScript
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
JavaScript中的数据类型：数字（number）、字符串（string）、布尔值（boolean）、数组（array）、对象（object）
数字类型：整数、浮点数、负数、无限大、科学计数法（1.2e4==12000）
查看变量类型：console.log（typeof a）
null、NaN、0、''、undefined都被if语句判断为false
===与==的区别：二者都是用于判断，===更加严格，如'1'==1为true，'1'===1为false
SetTimeout是过一段时间触发时间，SetInterval是每过一段时间就触发一次事件
SetInterval会返回一个计时器的id，该id用来标识该计时器以让ClearInterval找到想要清除的计时器
SetTimeout即使是设定成0秒触发也一定会慢于直接写在主体函数中的语句

判断一个数为整型：Number.isInterger(a),若a=1，返回true，若a=1.1，则返回false
转换整型的方法为：parseInt('1.5')=1,parseInt('1a')=1,parseInt(a1)=NaN
转为浮点数parseFloat('1')=1,parseFloat('1.1')=1.1,parseFloat('1.1a')=1.1,parseFloat(a1.1)=NaN,parseFloat('.1')=0.1
判断是否为NaN：isNaN(1)为false，isNaN（0/0）为true
在其他类型前加一个'+'可将其转换为数字类型：+'1'为1，+''为0，+'1.1'为1.1，+true为1，+false为0

获得字符串中的某一字符：'hello'.charAt(0)为'h','hello'.charAt(1)为'e',另外'hello'[0]为'h'
检查一段字符串是否包含另一段字符串：'hello world'.includes（'hello'）为true
用字符串将字符串分割为数组'hello|world'.split('|')为['hello','world']
连接字符串：'h'.concat('ello',' ','world')为'hello world'
截取字符串:'hello world'.slice(6)为'world',
去除字符串两头的空格:'  hello  '.trim为'hello'

对象中可以嵌套对象：
var object1={
           property1：1，
           property2：2，
           property3：{
                      subproperty1：1
                      subproperty2：2
           }
}
通过 .来获取对象中的属性：object1.property3.subproperty1 或用[]：object1[property1]
对象中的属性值可以是数字、数组、对象、布尔值、字符串、函数，基本无限制

数组中的元素可以是数字、数组、对象、布尔值、字符串、函数，基本无限制
通过.length方法可以获取数组的长度（长度即为数组中有多少个元素）：[1,2,3].length=3
数组的一些常用方法:
array.push(e) 从数组末尾添加新元素,返回值为修改后数组的长度
array.unshift(e) 从数组开头添加新元素，返回值为修改后数组的长度
array.pop() 从数组末尾删除元素，返回值为被删除的那个元素
array.shift() 从数组开头删除元素,返回值为被删除的那个元素
array.reverse() 将数组颠倒顺序,返回颠倒后的数组
array.splice(从哪里剪，剪多长，替换元素1，替换元素2)，作用为剪接原数组
array.slice(从哪里剪，在哪里停) 作用为创造一个裁剪后的新数组,返回裁剪后的新数组，对原数组无影响
array.foreach(回调函数(元素，元素位置，原数组){具体行为})作用为迭代，回调函数的第一个参数固定为原数组中的每一个元素，第二个参数固定为那个元素的位置，第三个参数固定为原数组
array.filter(回调函数(元素，元素位置，原数组){条件})作用为过滤,通过回调函数建立一个从原数组过滤而来的新数组
array.every(回调函数(元素，元素位置，原数组){条件})作用为判断，若原数组中的所有元素都满足条件则返回true，否则返回false

null只有在需要清空一个量时才会赋值给它。nul只能手动设置而不能有由js默认
typeof null会返回object
null在被判断时被认为是false

undefined==null，因此undefined被判断时也返回false
当一个变量被声明而没有被赋值时，它的值就是undefined

构造函数用来构造新变量，在构造函数中用this表示表示即将定义的变量，在函数外用new来调用构造函数
function creatFunc(name,age,gender){
           this.name=name;
           this.age=age;
           this.gender=gender;
}
var person=new creatFunc('Dong',22,'male')




————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

vue
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
在{{}}中的内容可以被当作js语句来解析，但只能解析一部分内容如变量等，而不能解析如判断、循环语句等内容
v-model是vue中自定义的属性，也称为“指令”，v-model的作用为在表单输入元素或组件上创建数据的双向绑定,v-model限于<input>,<select>,<textarea>以及components使用，
v-model的修饰符：
.lazy ——监听 change 事件而不是 input，change事件对于不同的元素也不相同，如input元素的change事件在鼠标点击输入栏外时触发，.lazy的一个比较常见的用法是输入账号或密码时，系统动态提示
账号或密码是否合法或正确
.number ——将输入的合法符串转为数字
.trim ——移除输入内容两端空格
v-if和v-show都可以用于控制元素的显示或隐藏，不同的是v-if若为false，则整个元素会被直接删除，而v-show若为false，则dom元素仅会被隐藏而不会被删除
v-for用于迭代，注意v-for的迭代是动态的，向数组中添加元素时，v-for可以实时的更新其迭代的内容，v-for中添加key的主要作用是标识组件的唯一性，主要是为了更高效的更新元素
当v-if与v-for同时使用时，v-if的优先级要更高，官方并不推荐在同一元素上同时使用这两个属性
v-bind主要用于动态的绑定一个或多个attribute，也可以是组件的prop
v-on用于给元素绑定事件监听器，其参数主要是某特定的方法，可以在事件发生后触发这一方法，如v-on:click="afun()"，当元素被点击时执行afun()，v-on的修饰符有：
.stop ——调用 event.stopPropagation()。
.prevent ——调用 event.preventDefault()。
.capture ——在捕获模式添加事件监听器。
.self ——只有事件从元素本身发出才触发处理函数。
.{keyAlias} ——只在某些按键下触发处理函数。
.once ——最多触发一次处理函数。
.left ——只在鼠标左键事件触发处理函数。
.right ——只在鼠标右键事件触发处理函数。
.middle ——只在鼠标中键事件触发处理函数。
.passive ——通过 { passive: true } 附加一个 DOM 事件
"v-bind:"可以省略成":","v-on:"可以省略成"@"
<el-image>标签和<img>标签的区别：
img
<img src="@/assets/images/manualPic/login.png"/>
<el-image>
<el-image :src="require('@/assets/images/manualPic/login.png')" fit="fill"></el-image>
<el-image>需要引用require引入,属性fit的值可以是：fill / contain / cover / none / scale-down
                                                                                                                                                                                                                                                                                                                      -
通过slot=placeholder可自定义占位内容
      <el-image :src=""
      <div slot="placeholder">
      加载中...
      </div>
      </el-image>
通过slot=error可自定义加载失败内容
    <el-image>
      <div slot="error">
      加载失败
      </div>
    </el-image>


































