HTML:
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
HTML是标记语言而非编程语言，主要用来描述网页结构
<a>标签用于定义超链接，href属性指示链接目标
<p>标签用于定义段落
<div>标签用于定义文档中的分区
<hr>标签用于定义水平分界线
<br>标签用于定义断行
<button>标签用于定义按钮
<h1....h6>标签用于定义标婷，大小逐个递减
<img>标签用于定义图片，src属性用于指向图片地址，alt属性定义图片替换文字
<input>用于定义输入，type属性定义输入类型：text、checkbox、password、submit，其中submit配合form标签使用
<ol>用于定义有序列表，<ul>用于定义无序列表,<li>定义列表项目，它们组合使用
<table>用于定义表格，<tr>定义表格中的列，<td>定义表格中的单元格，他们组合使用
<head>标签内部用于定义关于文档的信息，<title>用于定义网页的标题
<!DOCTYPE>用于定义文档类型
<font>标签用于定义字体样式，color属性用于定义字体颜色，size属性用于定义字体大小

<span>与<div>的异同：
<div>与<span>都用于定义分区，不同的是<div>是块级元素，每对div标签（<div></div>）里的内容都可以占据一行，不会与其他标签在一行显示，div标签总是从新行开始显示；
div标签内可以添加其他的标签元素（行内元素、块级元素都行）
div标签可以通过css样式来设置自身的宽度（也可省略，当没有使用css自定义宽度时，div标签的宽度为其的容器的100%）、高度，且还可以设置标签之间的距离（padding与margin）

span标签是行内元素，会在一行显示，span标签内只能添加行内元素的标签或文本，span标签的宽度、高度都无法通过css样式设置，它的宽高受其本身内容（文字、图片）控制，随着内容的宽高改变而改变；
span标签无法控制外边距和内边距，虽然可以设置左右的外边距和内边距，但上下的外边距和内边距无法设置；
span标签里只能容纳文本或者是其他的行内元素，不能容纳块级元素
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

CSS:
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
CSS能高效地定义HTML元素的外观和样式
CSS的层叠次序：浏览器默认样式->外部样式表->内部样式表（位于<head>标签内）->行内样式（在HTML元素内部），优先级逐渐提升（即当不同样式表的样式发生冲突时，选择优先级高的执行）
内部样式：
           <head>
            <style>
            p{ 
            color:red
            }
            </style>
          </head>
外部样式：
<link rel="stylesheet" href="CSS文件的地址"  >
行内样式：<p style="color:red" ></p>
CSS的一些基本语法：
单项选择：
selector
{
  property:value
}

多项选择：
selector1，selector2，selector3....(selector之间为并列关系)
{
  property:value
}
后代选择：
selector1  selector2 （selector之间为包含关系）
{
  property:value
}
在后代选择中，selector1主要起到缩小范围的作用，特定选择selector1中的selector2
子选择：
selector1 > selector2 (selector之间为严格的父子关系)
{
  property:value
}
子选择与后代选择的主要不同之处在于后代选择会选择所有的被包含对象例如子对象和孙对象，而子选择只选择子对象
id选择
#id
{
   property：value
}
类选择
.class
{
  property:value
}
注意id选择的优先级比类选择的要高，意味着当而这发生冲突时执行的是id选择中的内容
边框属性border的样式有solid（实线）、dotted（点状）、dashed（虚线）三种
盒模型：
盒模型是css布局的基石，它规定了网页元素如何显示以及元素间的相互关系。css定义所有的元素都可以拥有像盒子一样的外形和平面空间。即都包含内容区、补白（填充）、边框、边界(外边距)
这就是盒模型。
盒模型由外到内的顺序为：margin（外边距）->border（边框）->padding（内边距）->box（内容）
位置属性poisition用于定义对象的位置，分为static（默认位置）、relative（相对位置）、absolute（绝对位置）、fixed（窗口位置）
relative与absolute：relative与absolute都是相对static而言的，relative与absolute的位置是从默认位置移动过去的，不同之处在于relative原有的static的位置保留，而absolute原有的位置
则不保留
属性float定义浮动，left表示浮于左端，right表示浮于右端
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

JavaScript
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
JavaScript中的数据类型：数字（number）、字符串（string）、布尔值（boolean）、数组（array）、对象（object）
数字类型：整数、浮点数、负数、无限大、科学计数法（1.2e4==12000）
查看变量类型：console.log（typeof a）
null、NaN、0、''、undefined都被if语句判断为false
===与==的区别：二者都是用于判断，===更加严格，如'1'==1为true，'1'===1为false

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



































